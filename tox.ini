[tox]
# Running plain tox will run the default environment (testenv) with the default
# python3 interpreter of the user.
envlist=testenv
[testenv]
deps=coverage
     pytest
commands =
    # Create HTML coverage report for humans and xml coverage report for external services.
    coverage run --source=buffer_methods -m pytest -v tests
    coverage html
    coverage xml

[testenv:lint]
deps=flake8
     flake8-import-order
     mypy
     pytest
     clang-format
     pre-commit
allowlist_externals = bash
commands =
    flake8 src tests setup.py
    bash -c 'clang-format -Werror -n -i src/buffer_methods/*.c'
    mypy src/buffer_methods tests/
    pre-commit run --all-files

[testenv:twine_check]
deps=build
     twine
skip_install=True
commands =
    python -m build
    twine check dist/*

[testenv:pedantic_compile]
deps=
skip_install=True
setenv=
    CFLAGS=-Wall -Werror -Wpedantic
allowlist_externals = bash
commands =
    bash -c 'CC=gcc python setup.py build_ext -f'
    bash -c 'CC=clang python setup.py build_ext -f'

[testenv:format]
deps=clang-format
skip_install=True
allowlist_externals = bash
commands =
    bash -c 'clang-format -i src/buffer_methods/*.c'

[flake8]
max-line-length=88

[testenv:asan]
setenv=
    PYTHONDEVMODE=1
    PYTHONUNBUFFERED=1
    PYTHONMALLOC=malloc
    CFLAGS=-lasan -fsanitize=address -fno-omit-frame-pointer
    ASAN_OPTIONS=log_path=asan_errors
allowlist_externals=bash
commands=
    bash -c 'export LD_PRELOAD=$(gcc -print-file-name=libasan.so) && printenv LD_PRELOAD && python -c "from buffer_methods import _buffer_methods" && pytest tests -v'


[testenv:docs]
deps=-r docs/requirements-docs.txt
allowlist_externals=mkdir
                    rm
commands=
    python --version
    # PLACEHOLDER: create _static folder, since we do not have static files in
    # our project yet
    mkdir -p docs/_static
    # Remove docs/_build so all documentation has to be build again
    # This is necessary when using --keep-going on sphinx-build
    rm -rf docs/_build
    # Test if documentation can be build without errors and warnings
    # -a rebuilds everything. -W turns warnings into errors.
    # --keep-going makes sure we see al the errors that are there in one go.
    sphinx-build -a -W -n --keep-going docs docs/_build
